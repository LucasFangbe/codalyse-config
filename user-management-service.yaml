spring:
  application:
    name: user-management-service
  rabbitmq:
    host: ${RABBITMQ_HOST:localhost}
    port: ${RABBITMQ_PORT:5672}
    username: ${RABBITMQ_USERNAME:guest}
    password: ${RABBITMQ_PASSWORD:guest}
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      timeout: 2000
      lettuce:
        pool:
          max-active: 10
          max-idle: 5
          min-idle: 1
  security:
    admin-direct-access:
      client-id: ${ADMIN_CLIENT_ID:admin-cli}
      username: ${ADMIN_USERNAME:admin}
      password: ${ADMIN_PASSWORD:admin}
      grant_type: password
      token-uri: ${TOKEN_URI:http://localhost:9090/realms/master/protocol/openid-connect/token}
      health-check-uri: ${HEALTH_CHECK_URI:http://localhost:9090/health}

cache:
  distributed:
    rabbitmq:
      consumer:
        id: ${RABBITMQ_CONSUMER_ID:USER_MANAGEMENT_SUB_APPLICATION_1}
    mode: true

rabbitmq:
  exchanges:
    - cache-queue-event-exchange
    - email-exchange
    - user-creation-exchange

  queues:
    - name: user-management-cache-event-queue
      exchange: cache-queue-event-exchange
      routingKey: subApplicationId.USER_MANAGEMENT_SUB_APPLICATION
    - name: email-exchange-queue
      exchange: email-exchange
      routingKey: .*
    - name: user-creation-queue
      exchange: user-creation-exchange
      routingKey: .*

keycloak:
  realm: code-guardian-realm

management:
  tracing:
    enabled: true
    sampling:
      probability: 1.0
  zipkin:
    tracing:
      endpoint: ${ZIPKIN_API_ENDPOINT:http://localhost:9411/api/v2/spans}
  endpoints:
    web:
      exposure:
        include: health,metrics
  health:
    circuitbreakers:
      enabled: true
      
identity:
  server:
    base:
      uri: ${IDENTITY_SERVER_BASE_URI:http://localhost:9090}
    realm: ${IDENTITY_SERVER_REALM:realm}
user:
  creation:
    message:
      handler:
        pause:
          rate: ${USER_CREATION_HANDLER_RATE:30000}
    scheduling:
      fixed-rate: ${USER_CREATION_SCHEDULING_FIXED_RATE:60000}
    email:
      validation:
        url: ${USER_CREATION_EMAIl_VALIDATION_URI:http://localhost:8081/users/[0]/email/validation}
        subject: CodeGuardian Email Validation
        from: codeguardian@gmail.com
        content: '<p>Hello,</p>
                  <p>Thank you for registering with us!</p>
                  <p>To complete your registration, please confirm your email address by clicking the button below:</p>
                  <p style="text-align: center; margin: 30px 0;">
                    <a href="%s" style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px;">Confirm Email</a>
                  </p>
                  <p>If you did not request this, you can safely ignore this message.</p>
                  <p>Best regards,<br>The CodeGuardian Team</p>'
resilience4j:
  circuitbreaker:
    instances:
      keycloakService:
        registerHealthIndicator: true
        slidingWindowSize: 3
        minimumNumberOfCalls: 3
        failureRateThreshold: 50
        waitDurationInOpenState: 10s
        permittedNumberOfCallsInHalfOpenState: 2
        automaticTransitionFromOpenToHalfOpenEnabled: true
        ignoreExceptions:
          - com.codalyse.usermanagement.exception.user.DuplicatedUserException
          - com.codalyse.usermanagement.exception.user.UserCreationBadRequestException
          - com.codalyse.usermanagement.exception.email.PushUserEmailValidationException
          - com.codalyse.usermanagement.exception.UserIdEncoderException
